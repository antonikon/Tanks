// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTank_reflection_ = NULL;
const ::google::protobuf::Descriptor* MWall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MWall_reflection_ = NULL;
const ::google::protobuf::Descriptor* MBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_p_2eproto() {
  protobuf_AddDesc_p_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "p.proto");
  GOOGLE_CHECK(file != NULL);
  MClient_descriptor_ = file->message_type(0);
  static const int MClient_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, keyfire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, keyshift_),
  };
  MClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MClient_descriptor_,
      MClient::default_instance_,
      MClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MClient));
  MTank_descriptor_ = file->message_type(1);
  static const int MTank_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, animationprogress_),
  };
  MTank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTank_descriptor_,
      MTank::default_instance_,
      MTank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTank));
  MWall_descriptor_ = file->message_type(2);
  static const int MWall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MWall, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MWall, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MWall, type_),
  };
  MWall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MWall_descriptor_,
      MWall::default_instance_,
      MWall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MWall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MWall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MWall));
  MBullet_descriptor_ = file->message_type(3);
  static const int MBullet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MBullet, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MBullet, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MBullet, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MBullet, animationprogress_),
  };
  MBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MBullet_descriptor_,
      MBullet::default_instance_,
      MBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MBullet));
  MServer_descriptor_ = file->message_type(4);
  static const int MServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MServer, playertank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MServer, tankslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MServer, walllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MServer, buleltlist_),
  };
  MServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MServer_descriptor_,
      MServer::default_instance_,
      MServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_p_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MClient_descriptor_, &MClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTank_descriptor_, &MTank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MWall_descriptor_, &MWall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MBullet_descriptor_, &MBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MServer_descriptor_, &MServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_p_2eproto() {
  delete MClient::default_instance_;
  delete MClient_reflection_;
  delete MTank::default_instance_;
  delete MTank_reflection_;
  delete MWall::default_instance_;
  delete MWall_reflection_;
  delete MBullet::default_instance_;
  delete MBullet_reflection_;
  delete MServer::default_instance_;
  delete MServer_reflection_;
}

void protobuf_AddDesc_p_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007p.proto\"U\n\007MClient\022\014\n\004type\030\001 \002(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\013\n\003key\030\003 \001(\005\022\017\n\007keyFire\030\004 \001(\010\022\020"
    "\n\010keyShift\030\005 \001(\010\"i\n\005MTank\022\014\n\004posX\030\001 \002(\005\022"
    "\014\n\004posY\030\002 \002(\005\022\r\n\005angle\030\003 \002(\005\022\014\n\004type\030\004 \002"
    "(\005\022\014\n\004team\030\005 \002(\005\022\031\n\021animationProgress\030\006 "
    "\002(\005\"1\n\005MWall\022\014\n\004posX\030\001 \002(\005\022\014\n\004posY\030\002 \002(\005"
    "\022\014\n\004type\030\003 \002(\005\"O\n\007MBullet\022\014\n\004posX\030\001 \002(\005\022"
    "\014\n\004posY\030\002 \002(\005\022\r\n\005angle\030\003 \002(\005\022\031\n\021animatio"
    "nProgress\030\004 \002(\005\"x\n\007MServer\022\032\n\nPlayerTank"
    "\030\001 \002(\0132\006.MTank\022\031\n\tTanksList\030\002 \003(\0132\006.MTan"
    "k\022\030\n\010WallList\030\003 \003(\0132\006.MWall\022\034\n\nBuleltLis"
    "t\030\004 \003(\0132\010.MBullet", 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p.proto", &protobuf_RegisterTypes);
  MClient::default_instance_ = new MClient();
  MTank::default_instance_ = new MTank();
  MWall::default_instance_ = new MWall();
  MBullet::default_instance_ = new MBullet();
  MServer::default_instance_ = new MServer();
  MClient::default_instance_->InitAsDefaultInstance();
  MTank::default_instance_->InitAsDefaultInstance();
  MWall::default_instance_->InitAsDefaultInstance();
  MBullet::default_instance_->InitAsDefaultInstance();
  MServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_p_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_p_2eproto {
  StaticDescriptorInitializer_p_2eproto() {
    protobuf_AddDesc_p_2eproto();
  }
} static_descriptor_initializer_p_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MClient::kTypeFieldNumber;
const int MClient::kNameFieldNumber;
const int MClient::kKeyFieldNumber;
const int MClient::kKeyFireFieldNumber;
const int MClient::kKeyShiftFieldNumber;
#endif  // !_MSC_VER

MClient::MClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MClient::InitAsDefaultInstance() {
}

MClient::MClient(const MClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MClient::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = 0;
  keyfire_ = false;
  keyshift_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MClient::~MClient() {
  SharedDtor();
}

void MClient::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MClient_descriptor_;
}

const MClient& MClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p_2eproto();
  return *default_instance_;
}

MClient* MClient::default_instance_ = NULL;

MClient* MClient::New() const {
  return new MClient;
}

void MClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    key_ = 0;
    keyfire_ = false;
    keyshift_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // optional int32 key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_keyFire;
        break;
      }

      // optional bool keyFire = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyFire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyfire_)));
          set_has_keyfire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keyShift;
        break;
      }

      // optional bool keyShift = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyShift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyshift_)));
          set_has_keyshift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key(), output);
  }

  // optional bool keyFire = 4;
  if (has_keyfire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->keyfire(), output);
  }

  // optional bool keyShift = 5;
  if (has_keyshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keyshift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key(), target);
  }

  // optional bool keyFire = 4;
  if (has_keyfire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->keyfire(), target);
  }

  // optional bool keyShift = 5;
  if (has_keyshift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keyshift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional bool keyFire = 4;
    if (has_keyfire()) {
      total_size += 1 + 1;
    }

    // optional bool keyShift = 5;
    if (has_keyshift()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MClient::MergeFrom(const MClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_keyfire()) {
      set_keyfire(from.keyfire());
    }
    if (from.has_keyshift()) {
      set_keyshift(from.keyshift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MClient::CopyFrom(const MClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MClient::Swap(MClient* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(keyfire_, other->keyfire_);
    std::swap(keyshift_, other->keyshift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MClient_descriptor_;
  metadata.reflection = MClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTank::kPosXFieldNumber;
const int MTank::kPosYFieldNumber;
const int MTank::kAngleFieldNumber;
const int MTank::kTypeFieldNumber;
const int MTank::kTeamFieldNumber;
const int MTank::kAnimationProgressFieldNumber;
#endif  // !_MSC_VER

MTank::MTank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MTank::InitAsDefaultInstance() {
}

MTank::MTank(const MTank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MTank::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  angle_ = 0;
  type_ = 0;
  team_ = 0;
  animationprogress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTank::~MTank() {
  SharedDtor();
}

void MTank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTank_descriptor_;
}

const MTank& MTank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p_2eproto();
  return *default_instance_;
}

MTank* MTank::default_instance_ = NULL;

MTank* MTank::New() const {
  return new MTank;
}

void MTank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    angle_ = 0;
    type_ = 0;
    team_ = 0;
    animationprogress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posY;
        break;
      }

      // required int32 posY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_angle;
        break;
      }

      // required int32 angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team;
        break;
      }

      // required int32 team = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_animationProgress;
        break;
      }

      // required int32 animationProgress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animationProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animationprogress_)));
          set_has_animationprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MTank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 posX = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // required int32 posY = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posy(), output);
  }

  // required int32 angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->angle(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 team = 5;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->team(), output);
  }

  // required int32 animationProgress = 6;
  if (has_animationprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->animationprogress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MTank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 posX = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // required int32 posY = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posy(), target);
  }

  // required int32 angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->angle(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 team = 5;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->team(), target);
  }

  // required int32 animationProgress = 6;
  if (has_animationprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->animationprogress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MTank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 posX = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posY = 2;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // required int32 angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 team = 5;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // required int32 animationProgress = 6;
    if (has_animationprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animationprogress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTank::MergeFrom(const MTank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_animationprogress()) {
      set_animationprogress(from.animationprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTank::CopyFrom(const MTank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MTank::Swap(MTank* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(angle_, other->angle_);
    std::swap(type_, other->type_);
    std::swap(team_, other->team_);
    std::swap(animationprogress_, other->animationprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTank_descriptor_;
  metadata.reflection = MTank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MWall::kPosXFieldNumber;
const int MWall::kPosYFieldNumber;
const int MWall::kTypeFieldNumber;
#endif  // !_MSC_VER

MWall::MWall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MWall::InitAsDefaultInstance() {
}

MWall::MWall(const MWall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MWall::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MWall::~MWall() {
  SharedDtor();
}

void MWall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MWall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MWall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MWall_descriptor_;
}

const MWall& MWall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p_2eproto();
  return *default_instance_;
}

MWall* MWall::default_instance_ = NULL;

MWall* MWall::New() const {
  return new MWall;
}

void MWall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MWall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posY;
        break;
      }

      // required int32 posY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MWall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 posX = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // required int32 posY = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posy(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MWall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 posX = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // required int32 posY = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posy(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MWall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 posX = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posY = 2;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MWall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MWall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MWall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MWall::MergeFrom(const MWall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MWall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MWall::CopyFrom(const MWall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MWall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MWall::Swap(MWall* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MWall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MWall_descriptor_;
  metadata.reflection = MWall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MBullet::kPosXFieldNumber;
const int MBullet::kPosYFieldNumber;
const int MBullet::kAngleFieldNumber;
const int MBullet::kAnimationProgressFieldNumber;
#endif  // !_MSC_VER

MBullet::MBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MBullet::InitAsDefaultInstance() {
}

MBullet::MBullet(const MBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MBullet::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  angle_ = 0;
  animationprogress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MBullet::~MBullet() {
  SharedDtor();
}

void MBullet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MBullet_descriptor_;
}

const MBullet& MBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p_2eproto();
  return *default_instance_;
}

MBullet* MBullet::default_instance_ = NULL;

MBullet* MBullet::New() const {
  return new MBullet;
}

void MBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    angle_ = 0;
    animationprogress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posY;
        break;
      }

      // required int32 posY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_angle;
        break;
      }

      // required int32 angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_animationProgress;
        break;
      }

      // required int32 animationProgress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animationProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animationprogress_)));
          set_has_animationprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 posX = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // required int32 posY = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posy(), output);
  }

  // required int32 angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->angle(), output);
  }

  // required int32 animationProgress = 4;
  if (has_animationprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->animationprogress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 posX = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // required int32 posY = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posy(), target);
  }

  // required int32 angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->angle(), target);
  }

  // required int32 animationProgress = 4;
  if (has_animationprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->animationprogress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 posX = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posY = 2;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // required int32 angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

    // required int32 animationProgress = 4;
    if (has_animationprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animationprogress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MBullet::MergeFrom(const MBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_animationprogress()) {
      set_animationprogress(from.animationprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MBullet::CopyFrom(const MBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MBullet::Swap(MBullet* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(angle_, other->angle_);
    std::swap(animationprogress_, other->animationprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MBullet_descriptor_;
  metadata.reflection = MBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MServer::kPlayerTankFieldNumber;
const int MServer::kTanksListFieldNumber;
const int MServer::kWallListFieldNumber;
const int MServer::kBuleltListFieldNumber;
#endif  // !_MSC_VER

MServer::MServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MServer::InitAsDefaultInstance() {
  playertank_ = const_cast< ::MTank*>(&::MTank::default_instance());
}

MServer::MServer(const MServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MServer::SharedCtor() {
  _cached_size_ = 0;
  playertank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MServer::~MServer() {
  SharedDtor();
}

void MServer::SharedDtor() {
  if (this != default_instance_) {
    delete playertank_;
  }
}

void MServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MServer_descriptor_;
}

const MServer& MServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p_2eproto();
  return *default_instance_;
}

MServer* MServer::default_instance_ = NULL;

MServer* MServer::New() const {
  return new MServer;
}

void MServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playertank()) {
      if (playertank_ != NULL) playertank_->::MTank::Clear();
    }
  }
  tankslist_.Clear();
  walllist_.Clear();
  buleltlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MTank PlayerTank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playertank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TanksList;
        break;
      }

      // repeated .MTank TanksList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TanksList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tankslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TanksList;
        if (input->ExpectTag(26)) goto parse_WallList;
        break;
      }

      // repeated .MWall WallList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WallList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_walllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_WallList;
        if (input->ExpectTag(34)) goto parse_BuleltList;
        break;
      }

      // repeated .MBullet BuleltList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuleltList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buleltlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BuleltList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MTank PlayerTank = 1;
  if (has_playertank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playertank(), output);
  }

  // repeated .MTank TanksList = 2;
  for (int i = 0; i < this->tankslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tankslist(i), output);
  }

  // repeated .MWall WallList = 3;
  for (int i = 0; i < this->walllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->walllist(i), output);
  }

  // repeated .MBullet BuleltList = 4;
  for (int i = 0; i < this->buleltlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buleltlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MTank PlayerTank = 1;
  if (has_playertank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playertank(), target);
  }

  // repeated .MTank TanksList = 2;
  for (int i = 0; i < this->tankslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tankslist(i), target);
  }

  // repeated .MWall WallList = 3;
  for (int i = 0; i < this->walllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->walllist(i), target);
  }

  // repeated .MBullet BuleltList = 4;
  for (int i = 0; i < this->buleltlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buleltlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MTank PlayerTank = 1;
    if (has_playertank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playertank());
    }

  }
  // repeated .MTank TanksList = 2;
  total_size += 1 * this->tankslist_size();
  for (int i = 0; i < this->tankslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tankslist(i));
  }

  // repeated .MWall WallList = 3;
  total_size += 1 * this->walllist_size();
  for (int i = 0; i < this->walllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->walllist(i));
  }

  // repeated .MBullet BuleltList = 4;
  total_size += 1 * this->buleltlist_size();
  for (int i = 0; i < this->buleltlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buleltlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MServer::MergeFrom(const MServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  tankslist_.MergeFrom(from.tankslist_);
  walllist_.MergeFrom(from.walllist_);
  buleltlist_.MergeFrom(from.buleltlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playertank()) {
      mutable_playertank()->::MTank::MergeFrom(from.playertank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MServer::CopyFrom(const MServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playertank()) {
    if (!this->playertank().IsInitialized()) return false;
  }
  for (int i = 0; i < tankslist_size(); i++) {
    if (!this->tankslist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < walllist_size(); i++) {
    if (!this->walllist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buleltlist_size(); i++) {
    if (!this->buleltlist(i).IsInitialized()) return false;
  }
  return true;
}

void MServer::Swap(MServer* other) {
  if (other != this) {
    std::swap(playertank_, other->playertank_);
    tankslist_.Swap(&other->tankslist_);
    walllist_.Swap(&other->walllist_);
    buleltlist_.Swap(&other->buleltlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MServer_descriptor_;
  metadata.reflection = MServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
