// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p.proto

#ifndef PROTOBUF_p_2eproto__INCLUDED
#define PROTOBUF_p_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_p_2eproto();
void protobuf_AssignDesc_p_2eproto();
void protobuf_ShutdownFile_p_2eproto();

class MClient;
class MTank;
class MWall;
class MBullet;
class MServer;

// ===================================================================

class MClient : public ::google::protobuf::Message {
 public:
  MClient();
  virtual ~MClient();

  MClient(const MClient& from);

  inline MClient& operator=(const MClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MClient& default_instance();

  void Swap(MClient* other);

  // implements Message ----------------------------------------------

  MClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MClient& from);
  void MergeFrom(const MClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional bool keyFire = 4;
  inline bool has_keyfire() const;
  inline void clear_keyfire();
  static const int kKeyFireFieldNumber = 4;
  inline bool keyfire() const;
  inline void set_keyfire(bool value);

  // optional bool keyShift = 5;
  inline bool has_keyshift() const;
  inline void clear_keyshift();
  static const int kKeyShiftFieldNumber = 5;
  inline bool keyshift() const;
  inline void set_keyshift(bool value);

  // @@protoc_insertion_point(class_scope:MClient)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_keyfire();
  inline void clear_has_keyfire();
  inline void set_has_keyshift();
  inline void clear_has_keyshift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 key_;
  bool keyfire_;
  bool keyshift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_p_2eproto();
  friend void protobuf_AssignDesc_p_2eproto();
  friend void protobuf_ShutdownFile_p_2eproto();

  void InitAsDefaultInstance();
  static MClient* default_instance_;
};
// -------------------------------------------------------------------

class MTank : public ::google::protobuf::Message {
 public:
  MTank();
  virtual ~MTank();

  MTank(const MTank& from);

  inline MTank& operator=(const MTank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MTank& default_instance();

  void Swap(MTank* other);

  // implements Message ----------------------------------------------

  MTank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MTank& from);
  void MergeFrom(const MTank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 posX = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // required int32 posY = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // required int32 angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);

  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 team = 5;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 5;
  inline ::google::protobuf::int32 team() const;
  inline void set_team(::google::protobuf::int32 value);

  // required int32 animationProgress = 6;
  inline bool has_animationprogress() const;
  inline void clear_animationprogress();
  static const int kAnimationProgressFieldNumber = 6;
  inline ::google::protobuf::int32 animationprogress() const;
  inline void set_animationprogress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MTank)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_animationprogress();
  inline void clear_has_animationprogress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 angle_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 team_;
  ::google::protobuf::int32 animationprogress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_p_2eproto();
  friend void protobuf_AssignDesc_p_2eproto();
  friend void protobuf_ShutdownFile_p_2eproto();

  void InitAsDefaultInstance();
  static MTank* default_instance_;
};
// -------------------------------------------------------------------

class MWall : public ::google::protobuf::Message {
 public:
  MWall();
  virtual ~MWall();

  MWall(const MWall& from);

  inline MWall& operator=(const MWall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MWall& default_instance();

  void Swap(MWall* other);

  // implements Message ----------------------------------------------

  MWall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MWall& from);
  void MergeFrom(const MWall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 posX = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // required int32 posY = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MWall)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_p_2eproto();
  friend void protobuf_AssignDesc_p_2eproto();
  friend void protobuf_ShutdownFile_p_2eproto();

  void InitAsDefaultInstance();
  static MWall* default_instance_;
};
// -------------------------------------------------------------------

class MBullet : public ::google::protobuf::Message {
 public:
  MBullet();
  virtual ~MBullet();

  MBullet(const MBullet& from);

  inline MBullet& operator=(const MBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MBullet& default_instance();

  void Swap(MBullet* other);

  // implements Message ----------------------------------------------

  MBullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MBullet& from);
  void MergeFrom(const MBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 posX = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // required int32 posY = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // required int32 angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);

  // required int32 animationProgress = 4;
  inline bool has_animationprogress() const;
  inline void clear_animationprogress();
  static const int kAnimationProgressFieldNumber = 4;
  inline ::google::protobuf::int32 animationprogress() const;
  inline void set_animationprogress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MBullet)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_animationprogress();
  inline void clear_has_animationprogress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 angle_;
  ::google::protobuf::int32 animationprogress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_p_2eproto();
  friend void protobuf_AssignDesc_p_2eproto();
  friend void protobuf_ShutdownFile_p_2eproto();

  void InitAsDefaultInstance();
  static MBullet* default_instance_;
};
// -------------------------------------------------------------------

class MServer : public ::google::protobuf::Message {
 public:
  MServer();
  virtual ~MServer();

  MServer(const MServer& from);

  inline MServer& operator=(const MServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MServer& default_instance();

  void Swap(MServer* other);

  // implements Message ----------------------------------------------

  MServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MServer& from);
  void MergeFrom(const MServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MTank PlayerTank = 1;
  inline bool has_playertank() const;
  inline void clear_playertank();
  static const int kPlayerTankFieldNumber = 1;
  inline const ::MTank& playertank() const;
  inline ::MTank* mutable_playertank();
  inline ::MTank* release_playertank();
  inline void set_allocated_playertank(::MTank* playertank);

  // repeated .MTank TanksList = 2;
  inline int tankslist_size() const;
  inline void clear_tankslist();
  static const int kTanksListFieldNumber = 2;
  inline const ::MTank& tankslist(int index) const;
  inline ::MTank* mutable_tankslist(int index);
  inline ::MTank* add_tankslist();
  inline const ::google::protobuf::RepeatedPtrField< ::MTank >&
      tankslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MTank >*
      mutable_tankslist();

  // repeated .MWall WallList = 3;
  inline int walllist_size() const;
  inline void clear_walllist();
  static const int kWallListFieldNumber = 3;
  inline const ::MWall& walllist(int index) const;
  inline ::MWall* mutable_walllist(int index);
  inline ::MWall* add_walllist();
  inline const ::google::protobuf::RepeatedPtrField< ::MWall >&
      walllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MWall >*
      mutable_walllist();

  // repeated .MBullet BuleltList = 4;
  inline int buleltlist_size() const;
  inline void clear_buleltlist();
  static const int kBuleltListFieldNumber = 4;
  inline const ::MBullet& buleltlist(int index) const;
  inline ::MBullet* mutable_buleltlist(int index);
  inline ::MBullet* add_buleltlist();
  inline const ::google::protobuf::RepeatedPtrField< ::MBullet >&
      buleltlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MBullet >*
      mutable_buleltlist();

  // @@protoc_insertion_point(class_scope:MServer)
 private:
  inline void set_has_playertank();
  inline void clear_has_playertank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MTank* playertank_;
  ::google::protobuf::RepeatedPtrField< ::MTank > tankslist_;
  ::google::protobuf::RepeatedPtrField< ::MWall > walllist_;
  ::google::protobuf::RepeatedPtrField< ::MBullet > buleltlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_p_2eproto();
  friend void protobuf_AssignDesc_p_2eproto();
  friend void protobuf_ShutdownFile_p_2eproto();

  void InitAsDefaultInstance();
  static MServer* default_instance_;
};
// ===================================================================


// ===================================================================

// MClient

// required int32 type = 1;
inline bool MClient::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MClient::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MClient::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MClient::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MClient::type() const {
  return type_;
}
inline void MClient::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool MClient::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MClient::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MClient::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MClient::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MClient::name() const {
  return *name_;
}
inline void MClient::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MClient::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MClient::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MClient::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MClient::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MClient::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 key = 3;
inline bool MClient::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MClient::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MClient::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MClient::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 MClient::key() const {
  return key_;
}
inline void MClient::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional bool keyFire = 4;
inline bool MClient::has_keyfire() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MClient::set_has_keyfire() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MClient::clear_has_keyfire() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MClient::clear_keyfire() {
  keyfire_ = false;
  clear_has_keyfire();
}
inline bool MClient::keyfire() const {
  return keyfire_;
}
inline void MClient::set_keyfire(bool value) {
  set_has_keyfire();
  keyfire_ = value;
}

// optional bool keyShift = 5;
inline bool MClient::has_keyshift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MClient::set_has_keyshift() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MClient::clear_has_keyshift() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MClient::clear_keyshift() {
  keyshift_ = false;
  clear_has_keyshift();
}
inline bool MClient::keyshift() const {
  return keyshift_;
}
inline void MClient::set_keyshift(bool value) {
  set_has_keyshift();
  keyshift_ = value;
}

// -------------------------------------------------------------------

// MTank

// required int32 posX = 1;
inline bool MTank::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MTank::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MTank::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MTank::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 MTank::posx() const {
  return posx_;
}
inline void MTank::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// required int32 posY = 2;
inline bool MTank::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MTank::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MTank::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MTank::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 MTank::posy() const {
  return posy_;
}
inline void MTank::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// required int32 angle = 3;
inline bool MTank::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MTank::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MTank::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MTank::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 MTank::angle() const {
  return angle_;
}
inline void MTank::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// required int32 type = 4;
inline bool MTank::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MTank::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MTank::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MTank::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MTank::type() const {
  return type_;
}
inline void MTank::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 team = 5;
inline bool MTank::has_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MTank::set_has_team() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MTank::clear_has_team() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MTank::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::google::protobuf::int32 MTank::team() const {
  return team_;
}
inline void MTank::set_team(::google::protobuf::int32 value) {
  set_has_team();
  team_ = value;
}

// required int32 animationProgress = 6;
inline bool MTank::has_animationprogress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MTank::set_has_animationprogress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MTank::clear_has_animationprogress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MTank::clear_animationprogress() {
  animationprogress_ = 0;
  clear_has_animationprogress();
}
inline ::google::protobuf::int32 MTank::animationprogress() const {
  return animationprogress_;
}
inline void MTank::set_animationprogress(::google::protobuf::int32 value) {
  set_has_animationprogress();
  animationprogress_ = value;
}

// -------------------------------------------------------------------

// MWall

// required int32 posX = 1;
inline bool MWall::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MWall::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MWall::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MWall::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 MWall::posx() const {
  return posx_;
}
inline void MWall::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// required int32 posY = 2;
inline bool MWall::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MWall::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MWall::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MWall::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 MWall::posy() const {
  return posy_;
}
inline void MWall::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// required int32 type = 3;
inline bool MWall::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MWall::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MWall::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MWall::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MWall::type() const {
  return type_;
}
inline void MWall::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// MBullet

// required int32 posX = 1;
inline bool MBullet::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MBullet::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MBullet::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MBullet::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 MBullet::posx() const {
  return posx_;
}
inline void MBullet::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// required int32 posY = 2;
inline bool MBullet::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MBullet::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MBullet::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MBullet::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 MBullet::posy() const {
  return posy_;
}
inline void MBullet::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// required int32 angle = 3;
inline bool MBullet::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MBullet::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MBullet::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MBullet::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 MBullet::angle() const {
  return angle_;
}
inline void MBullet::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// required int32 animationProgress = 4;
inline bool MBullet::has_animationprogress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MBullet::set_has_animationprogress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MBullet::clear_has_animationprogress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MBullet::clear_animationprogress() {
  animationprogress_ = 0;
  clear_has_animationprogress();
}
inline ::google::protobuf::int32 MBullet::animationprogress() const {
  return animationprogress_;
}
inline void MBullet::set_animationprogress(::google::protobuf::int32 value) {
  set_has_animationprogress();
  animationprogress_ = value;
}

// -------------------------------------------------------------------

// MServer

// required .MTank PlayerTank = 1;
inline bool MServer::has_playertank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MServer::set_has_playertank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MServer::clear_has_playertank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MServer::clear_playertank() {
  if (playertank_ != NULL) playertank_->::MTank::Clear();
  clear_has_playertank();
}
inline const ::MTank& MServer::playertank() const {
  return playertank_ != NULL ? *playertank_ : *default_instance_->playertank_;
}
inline ::MTank* MServer::mutable_playertank() {
  set_has_playertank();
  if (playertank_ == NULL) playertank_ = new ::MTank;
  return playertank_;
}
inline ::MTank* MServer::release_playertank() {
  clear_has_playertank();
  ::MTank* temp = playertank_;
  playertank_ = NULL;
  return temp;
}
inline void MServer::set_allocated_playertank(::MTank* playertank) {
  delete playertank_;
  playertank_ = playertank;
  if (playertank) {
    set_has_playertank();
  } else {
    clear_has_playertank();
  }
}

// repeated .MTank TanksList = 2;
inline int MServer::tankslist_size() const {
  return tankslist_.size();
}
inline void MServer::clear_tankslist() {
  tankslist_.Clear();
}
inline const ::MTank& MServer::tankslist(int index) const {
  return tankslist_.Get(index);
}
inline ::MTank* MServer::mutable_tankslist(int index) {
  return tankslist_.Mutable(index);
}
inline ::MTank* MServer::add_tankslist() {
  return tankslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MTank >&
MServer::tankslist() const {
  return tankslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MTank >*
MServer::mutable_tankslist() {
  return &tankslist_;
}

// repeated .MWall WallList = 3;
inline int MServer::walllist_size() const {
  return walllist_.size();
}
inline void MServer::clear_walllist() {
  walllist_.Clear();
}
inline const ::MWall& MServer::walllist(int index) const {
  return walllist_.Get(index);
}
inline ::MWall* MServer::mutable_walllist(int index) {
  return walllist_.Mutable(index);
}
inline ::MWall* MServer::add_walllist() {
  return walllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MWall >&
MServer::walllist() const {
  return walllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MWall >*
MServer::mutable_walllist() {
  return &walllist_;
}

// repeated .MBullet BuleltList = 4;
inline int MServer::buleltlist_size() const {
  return buleltlist_.size();
}
inline void MServer::clear_buleltlist() {
  buleltlist_.Clear();
}
inline const ::MBullet& MServer::buleltlist(int index) const {
  return buleltlist_.Get(index);
}
inline ::MBullet* MServer::mutable_buleltlist(int index) {
  return buleltlist_.Mutable(index);
}
inline ::MBullet* MServer::add_buleltlist() {
  return buleltlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MBullet >&
MServer::buleltlist() const {
  return buleltlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MBullet >*
MServer::mutable_buleltlist() {
  return &buleltlist_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_p_2eproto__INCLUDED
